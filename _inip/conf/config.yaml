#
# This is the default config file. It allows all users to do anything,
# so don't use it on production systems.
#
# Look here for more config file examples:
# https://github.com/verdaccio/verdaccio/tree/master/conf
#

# path to a directory with all packages
storage: /verdaccio-docker/storage
# path to a directory with plugins to include
plugins: /verdaccio-docker/plugins

web:
  title: Verdaccio
  # comment out to disable gravatar support
  # gravatar: false
  # by default packages are ordercer ascendant (asc|desc)
  # sort_packages: asc

https:
  key: /verdaccio-docker/certs/cloudflare.key
  cert: /verdaccio-docker/certs/cloudflare.pem
  ca: /verdaccio-docker/certs/cloudflare.ca

auth:
  htpasswd:
    file: /verdaccio-docker/storage/htpasswd
    # Maximum amount of users allowed to register, defaults to "+inf".
    # You can set this to -1 to disable registration.
    # max_users: 1000

# security:
#     api:
#         legacy: false
#         jwt:
#             sign:
#                 expiresIn: 20y
#                 notBefore: 1
#             verify:
#                 ignoreExpiration: true
#     web:
#         sign:
#             expiresIn: 20y
#             notBefore: 1
#         verify:
#             ignoreExpiration: true

# a list of other known repositories we can talk to
uplinks:
    npmjs:
        url: https://registry.npmjs.org/

packages:
  '@*/*':
    # scoped packages
    access: $authenticated
    publish: inip
    unpublish: inip
    proxy: npmjs

  '**':
    # allow all users (including non-authenticated users) to read and
    # publish all packages
    #
    # you can specify usernames/groupnames (depending on your auth plugin)
    # and three keywords: "$all", "$anonymous", "$authenticated"
    access: inip

    # allow all known users to publish/publish packages
    # (anyone can register by default, remember?)
    publish: inip
    unpublish: inip

    # if package is not available locally, proxy requests to 'npmjs' registry
    proxy: npmjs

# You can specify HTTP/1.1 server keep alive timeout in seconds for incoming connections.
# A value of 0 makes the http server behave similarly to Node.js versions prior to 8.0.0, which did not have a keep-alive timeout.
# WORKAROUND: Through given configuration you can workaround following issue https://github.com/verdaccio/verdaccio/issues/301. Set to 0 in case 60 is not enough.
server:
  keepAliveTimeout: 60

middlewares:
  audit:
    enabled: true

# log settings
logs:
  - { type: stdout, format: pretty, level: http }
  #- {type: file, path: verdaccio.log, level: info}
# experiments:
#    # support for npm token command
#    token: true
